#!/usr/bin/env fish

function main
    set_echo_color
    analysis_argu $argv
    check_root_permission

    if test "$do_in_chroot_proc" = 1
        in_chroot_proc
        exit 0
    end

    if test "$do_update_bin" = 1
        update_bin
        exit 0
    end

    if test "$do_change_etc" = 1
        change_etc
        exit 0
    end

    if test "$do_rollback_system" = 1
        rollback_system
        exit 0
    end

    if test "$do_open_shell" = 1
        open_shell
        exit 0
    end

    if test "$do_update_system" = 1
        update_system
        exit 0
    end
end

function set_echo_color
    set -g r '\033[1;31m' # 红
    set -g g '\033[1;32m' # 绿
    set -g y '\033[1;33m' # 黄
    set -g b '\033[1;36m' # 蓝
    set -g w '\033[1;37m' # 白
    set -g h '\033[0m'    # 后缀
end

function analysis_argu
    set argu_list $argv

    while test (count $argu_list) -gt 0
        switch $argu_list[1]
            case -h --help
                usage
            case --in-chroot
                set -g do_in_chroot_proc 1

                set -e argu_list[1]
                set -g grub_do $argu_list[1]
            case -b bin
                set -g do_update_bin 1
            case -e etc
                set -g do_change_etc 1

                set -e argu_list[1]
                set -g change_type $argu_list[1]
            case -r rollback
                set -g do_rollback_system 1

                set -e argu_list[1]
                set -g snapshot_id $argu_list[1]
            case -s shell
                set -g do_open_shell 1
            case -u dup
                set -g do_update_system 1
            case '*'
                error 'wrong argument: '$argu_list[1]
        end

        set -e argu_list[1]
    end
end

function usage
    echo 'Syntax: transactional-update [option...]'
    echo
    echo 'Applies package updates to a new snapshot without touching the running system.'
    echo
    echo 'General Commands:'
    echo '-b, bin                    Update this script'
    echo '-e, etc                    Update /etc to a new subvolume'
    echo '-s, shell                  Open rw shell in new snapshot before exiting'
    echo '-e rw, etc rw              Use overlay to make /etc writable'
    echo
    echo 'Package Commands:'
    echo '-u, dup                    Call (zypper dup)'
    echo
    echo 'Options:'
    echo '-h, --help                 Display this help and exit'
    exit 0
end

function in_chroot_proc
    switch $grub_do
        case install
            grub_install
        case mkconfig
            grub_install
            grub-mkconfig -o /boot/grub/grub.cfg
    end
end

function update_bin
    set script_name transactional-update
    set script_url https://gitlab.com/glek/uz/raw/main/cfg/transactional-update
    set snapshot_list (ls /.snapshots)

    curl -fLo /tmp/$script_name $script_url

    for snapshot_id in $snapshot_list
        set snapshot_dir /.snapshots/$snapshot_id/snapshot

        btrfs property set $snapshot_dir ro false
        rsync /tmp/$script_name $snapshot_dir/bin
        btrfs property set $snapshot_dir ro true
    end

    rm /tmp/$script_name
end

function change_etc
    switch $change_type
        case rw
            etc_overlay
        case '*'
            update_etc
    end
end

function etc_overlay
    set upper_dir /tmp/etc/upper
    set work_dir  /tmp/etc/work

    mkdir -p $upper_dir $work_dir
    mount -t overlay overlay -o lowerdir=/etc,upperdir=$upper_dir,workdir=$work_dir /etc
end

function update_etc
    create_new_snapshot 'etc update'
    mount_snapshot
    rsync -ah --delete --info=progress2 --inplace --no-whole-file --exclude 'resolv.conf' /etc $snapshot_dir
    arch-chroot $snapshot_dir (status -f) --in-chroot mkconfig
    set_snapshot_ro
end

function rollback_system
    set -g snapshot_dir /.snapshots/$snapshot_id/snapshot

    if ! test -d $snapshot_dir
        error $snapshot_id' not a snapshot.'
    end

    set_snapshot_rw
    mount_snapshot
    arch-chroot $snapshot_dir (status -f) --in-chroot install
    set_snapshot_ro
end

function open_shell
    create_new_snapshot 'open shell'
    mount_snapshot
    arch-chroot $snapshot_dir (status -f) --in-chroot mkconfig
    arch-chroot $snapshot_dir fish
    set_snapshot_ro
end

function update_system
    create_new_snapshot 'update system'
    mount_snapshot
    arch-chroot $snapshot_dir (status -f) --in-chroot mkconfig
    echo 'sorting mirrors ...'
    arch-chroot $snapshot_dir reflector --latest 20 --protocol https --save /etc/pacman.d/mirrorlist --sort rate
    arch-chroot $snapshot_dir pacman -Syu --needed --noconfirm
    set_snapshot_ro
end

function grub_install
    check_efi
    switch $bios_type
        case uefi
            grub-install --target=x86_64-efi --efi-directory=/boot/efi
        case bios
            set root_part (df | awk '$6=="/" {print $1}')

            if echo $root_part | grep -q 'nvme'
                set grub_part (echo $root_part | sed 's/p[0-9]$//')
            else
                set grub_part (echo $root_part | sed 's/[0-9]$//')
            end
            grub-install --target=i386-pc $grub_part
    end
end

function check_efi
    if test -d /sys/firmware/efi
        set -g bios_type 'uefi'
    else
        set -g bios_type 'bios'
    end
end

function create_new_snapshot
    set description $argv[1]
    set snapshot_id (snapper create --print-number --cleanup-algorithm number --description $description)
    set -g snapshot_dir /.snapshots/$snapshot_id/snapshot

    if ! echo -- "$snapshot_id" | grep -q '^[1-9][0-9]*$'
        error 'wrong snapshot id : '$snapshot_id
    end

    set_snapshot_rw
end

function set_snapshot_rw
    btrfs subvol set-default $snapshot_dir
    btrfs property set $snapshot_dir ro false
end

function mount_snapshot
    set root_part (df | awk '$6=="/" {print $1}')

    mount $root_part $snapshot_dir
    arch-chroot $snapshot_dir mount -a
end

function set_snapshot_ro
    umount -R $snapshot_dir
    btrfs property set $snapshot_dir ro true
end

function check_root_permission
    if test $USER != 'root'
        error 'no permission'
    end
end

function error
    set wrong_reason $argv

    echo -e $r'error: '$h$wrong_reason
    exit 1
end

main $argv

